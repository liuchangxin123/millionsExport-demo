/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.data.tables;


import com.pluto.millionsExport.data.Keys;
import com.pluto.millionsExport.data.Learn;
import com.pluto.millionsExport.data.tables.records.TradeRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trade extends TableImpl<TradeRecord> {

    private static final long serialVersionUID = -1219200585;

    /**
     * The reference instance of <code>learn.trade</code>
     */
    public static final Trade TRADE = new Trade();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TradeRecord> getRecordType() {
        return TradeRecord.class;
    }

    /**
     * The column <code>learn.trade.id</code>.
     */
    public final TableField<TradeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>learn.trade.good_sn</code>. 商品sn
     */
    public final TableField<TradeRecord, String> GOOD_SN = createField(DSL.name("good_sn"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "商品sn");

    /**
     * The column <code>learn.trade.reel_price</code>. 卖出价格
     */
    public final TableField<TradeRecord, BigDecimal> REEL_PRICE = createField(DSL.name("reel_price"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "卖出价格");

    /**
     * The column <code>learn.trade.operate</code>. 操作人
     */
    public final TableField<TradeRecord, String> OPERATE = createField(DSL.name("operate"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "操作人");

    /**
     * The column <code>learn.trade.created</code>. 创建时间
     */
    public final TableField<TradeRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>learn.trade.updated</code>. 更新时间
     */
    public final TableField<TradeRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * Create a <code>learn.trade</code> table reference
     */
    public Trade() {
        this(DSL.name("trade"), null);
    }

    /**
     * Create an aliased <code>learn.trade</code> table reference
     */
    public Trade(String alias) {
        this(DSL.name(alias), TRADE);
    }

    /**
     * Create an aliased <code>learn.trade</code> table reference
     */
    public Trade(Name alias) {
        this(alias, TRADE);
    }

    private Trade(Name alias, Table<TradeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trade(Name alias, Table<TradeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Trade(Table<O> child, ForeignKey<O, TradeRecord> key) {
        super(child, key, TRADE);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public Identity<TradeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRADE;
    }

    @Override
    public UniqueKey<TradeRecord> getPrimaryKey() {
        return Keys.KEY_TRADE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TradeRecord>> getKeys() {
        return Arrays.<UniqueKey<TradeRecord>>asList(Keys.KEY_TRADE_PRIMARY);
    }

    @Override
    public Trade as(String alias) {
        return new Trade(DSL.name(alias), this);
    }

    @Override
    public Trade as(Name alias) {
        return new Trade(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trade rename(String name) {
        return new Trade(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trade rename(Name name) {
        return new Trade(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, BigDecimal, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
