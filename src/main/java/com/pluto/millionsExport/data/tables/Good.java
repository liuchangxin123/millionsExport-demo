/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.data.tables;


import com.pluto.millionsExport.data.Keys;
import com.pluto.millionsExport.data.Learn;
import com.pluto.millionsExport.data.tables.records.GoodRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Good extends TableImpl<GoodRecord> {

    private static final long serialVersionUID = 317980952;

    /**
     * The reference instance of <code>learn.good</code>
     */
    public static final Good GOOD = new Good();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GoodRecord> getRecordType() {
        return GoodRecord.class;
    }

    /**
     * The column <code>learn.good.id</code>.
     */
    public final TableField<GoodRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>learn.good.sn</code>. 编码

     */
    public final TableField<GoodRecord, String> SN = createField(DSL.name("sn"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "编码\n");

    /**
     * The column <code>learn.good.name</code>. 名字
     */
    public final TableField<GoodRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "名字");

    /**
     * The column <code>learn.good.alias</code>. 别名
     */
    public final TableField<GoodRecord, String> ALIAS = createField(DSL.name("alias"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "别名");

    /**
     * The column <code>learn.good.picture</code>. 图片

     */
    public final TableField<GoodRecord, String> PICTURE = createField(DSL.name("picture"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "图片\n");

    /**
     * The column <code>learn.good.stock</code>. 库存
     */
    public final TableField<GoodRecord, Integer> STOCK = createField(DSL.name("stock"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "库存");

    /**
     * The column <code>learn.good.cost_price</code>. 进货价

     */
    public final TableField<GoodRecord, BigDecimal> COST_PRICE = createField(DSL.name("cost_price"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "进货价\n");

    /**
     * The column <code>learn.good.price</code>. 售价
     */
    public final TableField<GoodRecord, BigDecimal> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "售价");

    /**
     * The column <code>learn.good.status</code>. 上下架0上架；1下架
     */
    public final TableField<GoodRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "上下架0上架；1下架");

    /**
     * The column <code>learn.good.operate</code>. 操作人
     */
    public final TableField<GoodRecord, String> OPERATE = createField(DSL.name("operate"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "操作人");

    /**
     * The column <code>learn.good.created</code>. 创建时间
     */
    public final TableField<GoodRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>learn.good.updated</code>. 更新时间
     */
    public final TableField<GoodRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * Create a <code>learn.good</code> table reference
     */
    public Good() {
        this(DSL.name("good"), null);
    }

    /**
     * Create an aliased <code>learn.good</code> table reference
     */
    public Good(String alias) {
        this(DSL.name(alias), GOOD);
    }

    /**
     * Create an aliased <code>learn.good</code> table reference
     */
    public Good(Name alias) {
        this(alias, GOOD);
    }

    private Good(Name alias, Table<GoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private Good(Name alias, Table<GoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Good(Table<O> child, ForeignKey<O, GoodRecord> key) {
        super(child, key, GOOD);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public Identity<GoodRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GOOD;
    }

    @Override
    public UniqueKey<GoodRecord> getPrimaryKey() {
        return Keys.KEY_GOOD_PRIMARY;
    }

    @Override
    public List<UniqueKey<GoodRecord>> getKeys() {
        return Arrays.<UniqueKey<GoodRecord>>asList(Keys.KEY_GOOD_PRIMARY);
    }

    @Override
    public Good as(String alias) {
        return new Good(DSL.name(alias), this);
    }

    @Override
    public Good as(Name alias) {
        return new Good(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Good rename(String name) {
        return new Good(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Good rename(Name name) {
        return new Good(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, Integer, BigDecimal, BigDecimal, Byte, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
