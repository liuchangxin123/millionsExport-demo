/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.data.tables;


import com.pluto.millionsExport.data.Indexes;
import com.pluto.millionsExport.data.Keys;
import com.pluto.millionsExport.data.Learn;
import com.pluto.millionsExport.data.tables.records.PatientMedicalRecordRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 患者结构化病历病程表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PatientMedicalRecord extends TableImpl<PatientMedicalRecordRecord> {

    private static final long serialVersionUID = 270080419;

    /**
     * The reference instance of <code>learn.patient_medical_record</code>
     */
    public static final PatientMedicalRecord PATIENT_MEDICAL_RECORD = new PatientMedicalRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientMedicalRecordRecord> getRecordType() {
        return PatientMedicalRecordRecord.class;
    }

    /**
     * The column <code>learn.patient_medical_record.id</code>. 标识
     */
    public final TableField<PatientMedicalRecordRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "标识");

    /**
     * The column <code>learn.patient_medical_record.create_by</code>. 创建人
     */
    public final TableField<PatientMedicalRecordRecord, String> CREATE_BY = createField(DSL.name("create_by"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "创建人");

    /**
     * The column <code>learn.patient_medical_record.create_time</code>. 创建时间
     */
    public final TableField<PatientMedicalRecordRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "创建时间");

    /**
     * The column <code>learn.patient_medical_record.update_by</code>. 更新人
     */
    public final TableField<PatientMedicalRecordRecord, String> UPDATE_BY = createField(DSL.name("update_by"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "更新人");

    /**
     * The column <code>learn.patient_medical_record.update_time</code>. 更新时间
     */
    public final TableField<PatientMedicalRecordRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "更新时间");

    /**
     * The column <code>learn.patient_medical_record.revision</code>. 乐观锁
     */
    public final TableField<PatientMedicalRecordRecord, Integer> REVISION = createField(DSL.name("revision"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "乐观锁");

    /**
     * The column <code>learn.patient_medical_record.deleted</code>. 删除标记
     */
    public final TableField<PatientMedicalRecordRecord, Byte> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.TINYINT, this, "删除标记");

    /**
     * The column <code>learn.patient_medical_record.patient_id</code>. 患者ID
     */
    public final TableField<PatientMedicalRecordRecord, String> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "患者ID");

    /**
     * The column <code>learn.patient_medical_record.medical_type</code>. 病程类型 入院，确诊，出院
     */
    public final TableField<PatientMedicalRecordRecord, String> MEDICAL_TYPE = createField(DSL.name("medical_type"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "病程类型 入院，确诊，出院");

    /**
     * The column <code>learn.patient_medical_record.diagnosis_time</code>. 确诊日期
     */
    public final TableField<PatientMedicalRecordRecord, LocalDateTime> DIAGNOSIS_TIME = createField(DSL.name("diagnosis_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "确诊日期");

    /**
     * The column <code>learn.patient_medical_record.medical_description</code>. 病情描述
     */
    public final TableField<PatientMedicalRecordRecord, String> MEDICAL_DESCRIPTION = createField(DSL.name("medical_description"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "病情描述");

    /**
     * The column <code>learn.patient_medical_record.pwo_id</code>. 解析任务ID
     */
    public final TableField<PatientMedicalRecordRecord, String> PWO_ID = createField(DSL.name("pwo_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "解析任务ID");

    /**
     * The column <code>learn.patient_medical_record.attachment</code>. 附件
     */
    public final TableField<PatientMedicalRecordRecord, JSON> ATTACHMENT = createField(DSL.name("attachment"), org.jooq.impl.SQLDataType.JSON, this, "附件");

    /**
     * The column <code>learn.patient_medical_record.medical_raw_id</code>. 病程id
     */
    public final TableField<PatientMedicalRecordRecord, String> MEDICAL_RAW_ID = createField(DSL.name("medical_raw_id"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "病程id");

    /**
     * The column <code>learn.patient_medical_record.parse_result</code>. 解析结果
     */
    public final TableField<PatientMedicalRecordRecord, JSON> PARSE_RESULT = createField(DSL.name("parse_result"), org.jooq.impl.SQLDataType.JSON, this, "解析结果");

    /**
     * The column <code>learn.patient_medical_record.parse_template_id</code>. 解析模板id
     */
    public final TableField<PatientMedicalRecordRecord, String> PARSE_TEMPLATE_ID = createField(DSL.name("parse_template_id"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "解析模板id");

    /**
     * The column <code>learn.patient_medical_record.patient_medical_type</code>. 病程类型
     */
    public final TableField<PatientMedicalRecordRecord, String> PATIENT_MEDICAL_TYPE = createField(DSL.name("patient_medical_type"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "病程类型");

    /**
     * The column <code>learn.patient_medical_record.parse_template_name</code>. 解析模板名称
     */
    public final TableField<PatientMedicalRecordRecord, String> PARSE_TEMPLATE_NAME = createField(DSL.name("parse_template_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "解析模板名称");

    /**
     * The column <code>learn.patient_medical_record.team_id</code>. 团队id
     */
    public final TableField<PatientMedicalRecordRecord, String> TEAM_ID = createField(DSL.name("team_id"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "团队id");

    /**
     * The column <code>learn.patient_medical_record.desensitize_attachment</code>. 脱敏后的附件
     */
    public final TableField<PatientMedicalRecordRecord, JSON> DESENSITIZE_ATTACHMENT = createField(DSL.name("desensitize_attachment"), org.jooq.impl.SQLDataType.JSON, this, "脱敏后的附件");

    /**
     * The column <code>learn.patient_medical_record.is_test</code>. 是否是测试数据
     */
    public final TableField<PatientMedicalRecordRecord, Byte> IS_TEST = createField(DSL.name("is_test"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否是测试数据");

    /**
     * The column <code>learn.patient_medical_record.original_version</code>. 原始版本号
     */
    public final TableField<PatientMedicalRecordRecord, Double> ORIGINAL_VERSION = createField(DSL.name("original_version"), org.jooq.impl.SQLDataType.FLOAT, this, "原始版本号");

    /**
     * The column <code>learn.patient_medical_record.current_version</code>. 当前版本号
     */
    public final TableField<PatientMedicalRecordRecord, Double> CURRENT_VERSION = createField(DSL.name("current_version"), org.jooq.impl.SQLDataType.FLOAT, this, "当前版本号");

    /**
     * Create a <code>learn.patient_medical_record</code> table reference
     */
    public PatientMedicalRecord() {
        this(DSL.name("patient_medical_record"), null);
    }

    /**
     * Create an aliased <code>learn.patient_medical_record</code> table reference
     */
    public PatientMedicalRecord(String alias) {
        this(DSL.name(alias), PATIENT_MEDICAL_RECORD);
    }

    /**
     * Create an aliased <code>learn.patient_medical_record</code> table reference
     */
    public PatientMedicalRecord(Name alias) {
        this(alias, PATIENT_MEDICAL_RECORD);
    }

    private PatientMedicalRecord(Name alias, Table<PatientMedicalRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private PatientMedicalRecord(Name alias, Table<PatientMedicalRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("患者结构化病历病程表"), TableOptions.table());
    }

    public <O extends Record> PatientMedicalRecord(Table<O> child, ForeignKey<O, PatientMedicalRecordRecord> key) {
        super(child, key, PATIENT_MEDICAL_RECORD);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATIENT_MEDICAL_RECORD_IDX_PATIENT_MEDICAL_TYPE, Indexes.PATIENT_MEDICAL_RECORD_IDX_PATIENT_TYPE_PMR, Indexes.PATIENT_MEDICAL_RECORD_IDX_PWO, Indexes.PATIENT_MEDICAL_RECORD_IDX_TEMPLATE);
    }

    @Override
    public UniqueKey<PatientMedicalRecordRecord> getPrimaryKey() {
        return Keys.KEY_PATIENT_MEDICAL_RECORD_PRIMARY;
    }

    @Override
    public List<UniqueKey<PatientMedicalRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientMedicalRecordRecord>>asList(Keys.KEY_PATIENT_MEDICAL_RECORD_PRIMARY);
    }

    @Override
    public PatientMedicalRecord as(String alias) {
        return new PatientMedicalRecord(DSL.name(alias), this);
    }

    @Override
    public PatientMedicalRecord as(Name alias) {
        return new PatientMedicalRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientMedicalRecord rename(String name) {
        return new PatientMedicalRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientMedicalRecord rename(Name name) {
        return new PatientMedicalRecord(name, null);
    }
}
