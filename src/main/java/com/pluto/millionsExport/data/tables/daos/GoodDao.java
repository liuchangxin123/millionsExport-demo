/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.data.tables.daos;


import com.pluto.millionsExport.data.tables.Good;
import com.pluto.millionsExport.data.tables.records.GoodRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GoodDao extends DAOImpl<GoodRecord, com.pluto.millionsExport.data.tables.pojos.Good, Integer> {

    /**
     * Create a new GoodDao without any configuration
     */
    public GoodDao() {
        super(Good.GOOD, com.pluto.millionsExport.data.tables.pojos.Good.class);
    }

    /**
     * Create a new GoodDao with an attached configuration
     */
    public GoodDao(Configuration configuration) {
        super(Good.GOOD, com.pluto.millionsExport.data.tables.pojos.Good.class, configuration);
    }

    @Override
    public Integer getId(com.pluto.millionsExport.data.tables.pojos.Good object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Good.GOOD.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchById(Integer... values) {
        return fetch(Good.GOOD.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.pluto.millionsExport.data.tables.pojos.Good fetchOneById(Integer value) {
        return fetchOne(Good.GOOD.ID, value);
    }

    /**
     * Fetch records that have <code>sn BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfSn(String lowerInclusive, String upperInclusive) {
        return fetchRange(Good.GOOD.SN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sn IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchBySn(String... values) {
        return fetch(Good.GOOD.SN, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Good.GOOD.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByName(String... values) {
        return fetch(Good.GOOD.NAME, values);
    }

    /**
     * Fetch records that have <code>alias BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfAlias(String lowerInclusive, String upperInclusive) {
        return fetchRange(Good.GOOD.ALIAS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>alias IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByAlias(String... values) {
        return fetch(Good.GOOD.ALIAS, values);
    }

    /**
     * Fetch records that have <code>picture BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfPicture(String lowerInclusive, String upperInclusive) {
        return fetchRange(Good.GOOD.PICTURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>picture IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByPicture(String... values) {
        return fetch(Good.GOOD.PICTURE, values);
    }

    /**
     * Fetch records that have <code>stock BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfStock(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Good.GOOD.STOCK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stock IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByStock(Integer... values) {
        return fetch(Good.GOOD.STOCK, values);
    }

    /**
     * Fetch records that have <code>cost_price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfCostPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Good.GOOD.COST_PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cost_price IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByCostPrice(BigDecimal... values) {
        return fetch(Good.GOOD.COST_PRICE, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Good.GOOD.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByPrice(BigDecimal... values) {
        return fetch(Good.GOOD.PRICE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfStatus(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Good.GOOD.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByStatus(Byte... values) {
        return fetch(Good.GOOD.STATUS, values);
    }

    /**
     * Fetch records that have <code>operate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfOperate(String lowerInclusive, String upperInclusive) {
        return fetchRange(Good.GOOD.OPERATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>operate IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByOperate(String... values) {
        return fetch(Good.GOOD.OPERATE, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Good.GOOD.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByCreated(LocalDateTime... values) {
        return fetch(Good.GOOD.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchRangeOfUpdated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Good.GOOD.UPDATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<com.pluto.millionsExport.data.tables.pojos.Good> fetchByUpdated(LocalDateTime... values) {
        return fetch(Good.GOOD.UPDATED, values);
    }
}
