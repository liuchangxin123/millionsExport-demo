/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.data.tables;


import com.pluto.millionsExport.data.Learn;
import com.pluto.millionsExport.data.tables.records.ParseTemplateRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParseTemplate extends TableImpl<ParseTemplateRecord> {

    private static final long serialVersionUID = -1475118415;

    /**
     * The reference instance of <code>learn.parse_template</code>
     */
    public static final ParseTemplate PARSE_TEMPLATE = new ParseTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParseTemplateRecord> getRecordType() {
        return ParseTemplateRecord.class;
    }

    /**
     * The column <code>learn.parse_template.id</code>.
     */
    public final TableField<ParseTemplateRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>learn.parse_template.create_by</code>.
     */
    public final TableField<ParseTemplateRecord, String> CREATE_BY = createField(DSL.name("create_by"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>learn.parse_template.create_time</code>.
     */
    public final TableField<ParseTemplateRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>learn.parse_template.deleted</code>.
     */
    public final TableField<ParseTemplateRecord, Byte> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>learn.parse_template.revision</code>.
     */
    public final TableField<ParseTemplateRecord, Integer> REVISION = createField(DSL.name("revision"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>learn.parse_template.update_by</code>.
     */
    public final TableField<ParseTemplateRecord, String> UPDATE_BY = createField(DSL.name("update_by"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>learn.parse_template.update_time</code>.
     */
    public final TableField<ParseTemplateRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>learn.parse_template.parse_data_setting</code>.
     */
    public final TableField<ParseTemplateRecord, JSON> PARSE_DATA_SETTING = createField(DSL.name("parse_data_setting"), org.jooq.impl.SQLDataType.JSON, this, "");

    /**
     * The column <code>learn.parse_template.parse_template_name</code>.
     */
    public final TableField<ParseTemplateRecord, String> PARSE_TEMPLATE_NAME = createField(DSL.name("parse_template_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>learn.parse_template.pwo_type</code>.
     */
    public final TableField<ParseTemplateRecord, String> PWO_TYPE = createField(DSL.name("pwo_type"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>learn.parse_template.parse_template_code</code>.
     */
    public final TableField<ParseTemplateRecord, String> PARSE_TEMPLATE_CODE = createField(DSL.name("parse_template_code"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>learn.parse_template.version</code>. 版本号
     */
    public final TableField<ParseTemplateRecord, Double> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "版本号");

    /**
     * Create a <code>learn.parse_template</code> table reference
     */
    public ParseTemplate() {
        this(DSL.name("parse_template"), null);
    }

    /**
     * Create an aliased <code>learn.parse_template</code> table reference
     */
    public ParseTemplate(String alias) {
        this(DSL.name(alias), PARSE_TEMPLATE);
    }

    /**
     * Create an aliased <code>learn.parse_template</code> table reference
     */
    public ParseTemplate(Name alias) {
        this(alias, PARSE_TEMPLATE);
    }

    private ParseTemplate(Name alias, Table<ParseTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParseTemplate(Name alias, Table<ParseTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ParseTemplate(Table<O> child, ForeignKey<O, ParseTemplateRecord> key) {
        super(child, key, PARSE_TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public ParseTemplate as(String alias) {
        return new ParseTemplate(DSL.name(alias), this);
    }

    @Override
    public ParseTemplate as(Name alias) {
        return new ParseTemplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParseTemplate rename(String name) {
        return new ParseTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParseTemplate rename(Name name) {
        return new ParseTemplate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, LocalDateTime, Byte, Integer, String, LocalDateTime, JSON, String, String, String, Double> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
