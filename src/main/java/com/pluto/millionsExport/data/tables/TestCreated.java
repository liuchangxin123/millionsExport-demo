/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.data.tables;


import com.pluto.millionsExport.data.Indexes;
import com.pluto.millionsExport.data.Keys;
import com.pluto.millionsExport.data.Learn;
import com.pluto.millionsExport.data.tables.records.TestCreatedRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 测试创建库
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestCreated extends TableImpl<TestCreatedRecord> {

    private static final long serialVersionUID = 458633909;

    /**
     * The reference instance of <code>learn.test_created</code>
     */
    public static final TestCreated TEST_CREATED = new TestCreated();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestCreatedRecord> getRecordType() {
        return TestCreatedRecord.class;
    }

    /**
     * The column <code>learn.test_created.id</code>. 标识
     */
    public final TableField<TestCreatedRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "标识");

    /**
     * The column <code>learn.test_created.tracking_id</code>. 链路追踪id
     */
    public final TableField<TestCreatedRecord, String> TRACKING_ID = createField(DSL.name("tracking_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "链路追踪id");

    /**
     * The column <code>learn.test_created.open_id</code>. openId
     */
    public final TableField<TestCreatedRecord, String> OPEN_ID = createField(DSL.name("open_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "openId");

    /**
     * The column <code>learn.test_created.created_time</code>. 创建时间
     */
    public final TableField<TestCreatedRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>learn.test_created.update_time</code>. 更新时间
     */
    public final TableField<TestCreatedRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "更新时间");

    /**
     * Create a <code>learn.test_created</code> table reference
     */
    public TestCreated() {
        this(DSL.name("test_created"), null);
    }

    /**
     * Create an aliased <code>learn.test_created</code> table reference
     */
    public TestCreated(String alias) {
        this(DSL.name(alias), TEST_CREATED);
    }

    /**
     * Create an aliased <code>learn.test_created</code> table reference
     */
    public TestCreated(Name alias) {
        this(alias, TEST_CREATED);
    }

    private TestCreated(Name alias, Table<TestCreatedRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestCreated(Name alias, Table<TestCreatedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("测试创建库"), TableOptions.table());
    }

    public <O extends Record> TestCreated(Table<O> child, ForeignKey<O, TestCreatedRecord> key) {
        super(child, key, TEST_CREATED);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_CREATED_IDX_CREATED_TIME);
    }

    @Override
    public UniqueKey<TestCreatedRecord> getPrimaryKey() {
        return Keys.KEY_TEST_CREATED_PRIMARY;
    }

    @Override
    public List<UniqueKey<TestCreatedRecord>> getKeys() {
        return Arrays.<UniqueKey<TestCreatedRecord>>asList(Keys.KEY_TEST_CREATED_PRIMARY);
    }

    @Override
    public TestCreated as(String alias) {
        return new TestCreated(DSL.name(alias), this);
    }

    @Override
    public TestCreated as(Name alias) {
        return new TestCreated(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCreated rename(String name) {
        return new TestCreated(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCreated rename(Name name) {
        return new TestCreated(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
