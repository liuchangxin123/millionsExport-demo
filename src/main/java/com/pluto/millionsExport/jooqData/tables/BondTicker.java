/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.jooqData.tables;


import com.pluto.millionsExport.jooqData.Indexes;
import com.pluto.millionsExport.jooqData.Keys;
import com.pluto.millionsExport.jooqData.Learn;
import com.pluto.millionsExport.jooqData.tables.records.BondTickerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BondTicker extends TableImpl<BondTickerRecord> {

    private static final long serialVersionUID = -465140838;

    /**
     * The reference instance of <code>learn.bond_ticker</code>
     */
    public static final BondTicker BOND_TICKER = new BondTicker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BondTickerRecord> getRecordType() {
        return BondTickerRecord.class;
    }

    /**
     * The column <code>learn.bond_ticker.ID</code>.
     */
    public final TableField<BondTickerRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>learn.bond_ticker.BOND_ID</code>.
     */
    public final TableField<BondTickerRecord, String> BOND_ID = createField(DSL.name("BOND_ID"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>learn.bond_ticker.SECURITY_ID</code>.
     */
    public final TableField<BondTickerRecord, Long> SECURITY_ID = createField(DSL.name("SECURITY_ID"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>learn.bond_ticker.UPDATE_TIME</code>.
     */
    public final TableField<BondTickerRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("UPDATE_TIME"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>learn.bond_ticker.TMSTAMP</code>.
     */
    public final TableField<BondTickerRecord, Long> TMSTAMP = createField(DSL.name("TMSTAMP"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>learn.bond_ticker</code> table reference
     */
    public BondTicker() {
        this(DSL.name("bond_ticker"), null);
    }

    /**
     * Create an aliased <code>learn.bond_ticker</code> table reference
     */
    public BondTicker(String alias) {
        this(DSL.name(alias), BOND_TICKER);
    }

    /**
     * Create an aliased <code>learn.bond_ticker</code> table reference
     */
    public BondTicker(Name alias) {
        this(alias, BOND_TICKER);
    }

    private BondTicker(Name alias, Table<BondTickerRecord> aliased) {
        this(alias, aliased, null);
    }

    private BondTicker(Name alias, Table<BondTickerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BondTicker(Table<O> child, ForeignKey<O, BondTickerRecord> key) {
        super(child, key, BOND_TICKER);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BOND_TICKER_IDX_BOND_TICKER1, Indexes.BOND_TICKER_IDX_BOND_TICKER2);
    }

    @Override
    public UniqueKey<BondTickerRecord> getPrimaryKey() {
        return Keys.KEY_BOND_TICKER_PRIMARY;
    }

    @Override
    public List<UniqueKey<BondTickerRecord>> getKeys() {
        return Arrays.<UniqueKey<BondTickerRecord>>asList(Keys.KEY_BOND_TICKER_PRIMARY);
    }

    @Override
    public BondTicker as(String alias) {
        return new BondTicker(DSL.name(alias), this);
    }

    @Override
    public BondTicker as(Name alias) {
        return new BondTicker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BondTicker rename(String name) {
        return new BondTicker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BondTicker rename(Name name) {
        return new BondTicker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Long, LocalDateTime, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
