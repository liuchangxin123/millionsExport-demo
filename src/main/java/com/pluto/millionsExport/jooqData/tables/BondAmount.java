/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.jooqData.tables;


import com.pluto.millionsExport.jooqData.Indexes;
import com.pluto.millionsExport.jooqData.Keys;
import com.pluto.millionsExport.jooqData.Learn;
import com.pluto.millionsExport.jooqData.tables.records.BondAmountRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 债券余额数据表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BondAmount extends TableImpl<BondAmountRecord> {

    private static final long serialVersionUID = -1444107655;

    /**
     * The reference instance of <code>learn.bond_amount</code>
     */
    public static final BondAmount BOND_AMOUNT = new BondAmount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BondAmountRecord> getRecordType() {
        return BondAmountRecord.class;
    }

    /**
     * The column <code>learn.bond_amount.id</code>. id
     */
    public final TableField<BondAmountRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "id");

    /**
     * The column <code>learn.bond_amount.bond_uni_code</code>. DM债券唯一编码
     */
    public final TableField<BondAmountRecord, Long> BOND_UNI_CODE = createField(DSL.name("bond_uni_code"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "DM债券唯一编码");

    /**
     * The column <code>learn.bond_amount.publish_date</code>. 公告日期
     */
    public final TableField<BondAmountRecord, LocalDate> PUBLISH_DATE = createField(DSL.name("publish_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "公告日期");

    /**
     * The column <code>learn.bond_amount.change_date</code>. 变动日期
     */
    public final TableField<BondAmountRecord, LocalDate> CHANGE_DATE = createField(DSL.name("change_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "变动日期");

    /**
     * The column <code>learn.bond_amount.change_reason</code>. 变动原因(默认给7：1 首次发行，2 回售，3 赎回，4 增发/续发，5 可转债转股，6 债券调换，7 到期兑付，8 提前偿还，9 债券合并上市，10 财政部购回)
     */
    public final TableField<BondAmountRecord, Byte> CHANGE_REASON = createField(DSL.name("change_reason"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("7", org.jooq.impl.SQLDataType.TINYINT)), this, "变动原因(默认给7：1 首次发行，2 回售，3 赎回，4 增发/续发，5 可转债转股，6 债券调换，7 到期兑付，8 提前偿还，9 债券合并上市，10 财政部购回)");

    /**
     * The column <code>learn.bond_amount.change_amount</code>. 变动规模(万元)
     */
    public final TableField<BondAmountRecord, BigDecimal> CHANGE_AMOUNT = createField(DSL.name("change_amount"), org.jooq.impl.SQLDataType.DECIMAL(18, 6), this, "变动规模(万元)");

    /**
     * The column <code>learn.bond_amount.remain_amount</code>. 余额(万元)
     */
    public final TableField<BondAmountRecord, BigDecimal> REMAIN_AMOUNT = createField(DSL.name("remain_amount"), org.jooq.impl.SQLDataType.DECIMAL(18, 6), this, "余额(万元)");

    /**
     * The column <code>learn.bond_amount.valid_status</code>. 是否有效(1-有效，0-无效。默认无效)
     */
    public final TableField<BondAmountRecord, Byte> VALID_STATUS = createField(DSL.name("valid_status"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否有效(1-有效，0-无效。默认无效)");

    /**
     * The column <code>learn.bond_amount.update_by</code>. 最后编辑人user_id
     */
    public final TableField<BondAmountRecord, Long> UPDATE_BY = createField(DSL.name("update_by"), org.jooq.impl.SQLDataType.BIGINT, this, "最后编辑人user_id");

    /**
     * The column <code>learn.bond_amount.update_time</code>. 更新时间
     */
    public final TableField<BondAmountRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(3)", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>learn.bond_amount.create_time</code>. 创建时间
     */
    public final TableField<BondAmountRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(3)", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>learn.bond_amount.row_unique_key</code>. 数据唯一标识(规则 : data_id + data_source + bond_uni_code 拼接)

     */
    public final TableField<BondAmountRecord, String> ROW_UNIQUE_KEY = createField(DSL.name("row_unique_key"), org.jooq.impl.SQLDataType.CHAR(50).nullable(false), this, "数据唯一标识(规则 : data_id + data_source + bond_uni_code 拼接)\n");

    /**
     * Create a <code>learn.bond_amount</code> table reference
     */
    public BondAmount() {
        this(DSL.name("bond_amount"), null);
    }

    /**
     * Create an aliased <code>learn.bond_amount</code> table reference
     */
    public BondAmount(String alias) {
        this(DSL.name(alias), BOND_AMOUNT);
    }

    /**
     * Create an aliased <code>learn.bond_amount</code> table reference
     */
    public BondAmount(Name alias) {
        this(alias, BOND_AMOUNT);
    }

    private BondAmount(Name alias, Table<BondAmountRecord> aliased) {
        this(alias, aliased, null);
    }

    private BondAmount(Name alias, Table<BondAmountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("债券余额数据表"), TableOptions.table());
    }

    public <O extends Record> BondAmount(Table<O> child, ForeignKey<O, BondAmountRecord> key) {
        super(child, key, BOND_AMOUNT);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BOND_AMOUNT_IDX_BOND_UNI_CODE);
    }

    @Override
    public Identity<BondAmountRecord, Long> getIdentity() {
        return Keys.IDENTITY_BOND_AMOUNT;
    }

    @Override
    public UniqueKey<BondAmountRecord> getPrimaryKey() {
        return Keys.KEY_BOND_AMOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<BondAmountRecord>> getKeys() {
        return Arrays.<UniqueKey<BondAmountRecord>>asList(Keys.KEY_BOND_AMOUNT_PRIMARY, Keys.KEY_BOND_AMOUNT_IDX_ROW_UNIQUE_KEY);
    }

    @Override
    public BondAmount as(String alias) {
        return new BondAmount(DSL.name(alias), this);
    }

    @Override
    public BondAmount as(Name alias) {
        return new BondAmount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BondAmount rename(String name) {
        return new BondAmount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BondAmount rename(Name name) {
        return new BondAmount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, LocalDate, LocalDate, Byte, BigDecimal, BigDecimal, Byte, Long, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
