/*
 * This file is generated by jOOQ.
 */
package com.pluto.millionsExport.jooqData.tables;


import com.pluto.millionsExport.jooqData.Learn;
import com.pluto.millionsExport.jooqData.tables.records.StudentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

    private static final long serialVersionUID = -1650982237;

    /**
     * The reference instance of <code>learn.student</code>
     */
    public static final Student STUDENT = new Student();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentRecord> getRecordType() {
        return StudentRecord.class;
    }

    /**
     * The column <code>learn.student.s_id</code>.
     */
    public final TableField<StudentRecord, Integer> S_ID = createField(DSL.name("s_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>learn.student.sname</code>.
     */
    public final TableField<StudentRecord, String> SNAME = createField(DSL.name("sname"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>learn.student.sage</code>.
     */
    public final TableField<StudentRecord, Integer> SAGE = createField(DSL.name("sage"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>learn.student.sgender</code>.
     */
    public final TableField<StudentRecord, String> SGENDER = createField(DSL.name("sgender"), org.jooq.impl.SQLDataType.VARCHAR(8), this, "");

    /**
     * Create a <code>learn.student</code> table reference
     */
    public Student() {
        this(DSL.name("student"), null);
    }

    /**
     * Create an aliased <code>learn.student</code> table reference
     */
    public Student(String alias) {
        this(DSL.name(alias), STUDENT);
    }

    /**
     * Create an aliased <code>learn.student</code> table reference
     */
    public Student(Name alias) {
        this(alias, STUDENT);
    }

    private Student(Name alias, Table<StudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Student(Name alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Student(Table<O> child, ForeignKey<O, StudentRecord> key) {
        super(child, key, STUDENT);
    }

    @Override
    public Schema getSchema() {
        return Learn.LEARN;
    }

    @Override
    public Student as(String alias) {
        return new Student(DSL.name(alias), this);
    }

    @Override
    public Student as(Name alias) {
        return new Student(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(String name) {
        return new Student(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(Name name) {
        return new Student(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
